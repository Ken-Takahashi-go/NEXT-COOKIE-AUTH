{"ast":null,"code":"import axios from \"axios\";\nimport Router from \"next/router\";\naxios.defaults.withCredentials = true;\nexport const getServerSideToken = req => {\n  const {\n    signedCookies = {}\n  } = {};\n\n  if (!signedCookies) {\n    return {};\n  } else if (!signedCookies.token) {\n    return {};\n  }\n\n  return {\n    user: signedCookies.token\n  };\n};\nexport const getClientsSideToken = () => {\n  if (false) {\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\n    return {\n      user\n    };\n  }\n\n  return {\n    user: {}\n  };\n};\nconst WINDOW_USER_SCRIPT_VARIABLE = \"__USER__\";\nexport const getUserScript = user => {\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\n};\nexport const authInitialProps = isProtectedRoute => ({\n  req\n}) => {\n  const auth = req ? getServerSideToken(req) : getClientsSideToken();\n  const currentPath = req ? req.url : window.location.pathname;\n  const user = auth.user;\n  const isAnonymous = !user || user.type !== \"authenticated\";\n\n  if (isProtectedRoute && isAnonymous) {\n    return reirectUser;\n  }\n\n  return {\n    auth\n  };\n};\nexport const loginUser = async (email, password) => {\n  const {\n    data\n  } = await axios.post(\"/api/login\", {\n    email,\n    password\n  });\n\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\n  }\n};\nexport const logoutUser = async () => {\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\n  }\n\n  await axios.post(\"/api/logout\");\n  Router.push(\"/login\");\n};\nexport const getUserProfile = async () => {\n  const {\n    data\n  } = await axios.get(\"/api/profile\");\n  return data;\n};","map":{"version":3,"sources":["C:/Users/takah/OneDrive/デスクトップ/next-cookie-auth/lib/auth.js"],"names":["axios","Router","defaults","withCredentials","getServerSideToken","req","signedCookies","token","user","getClientsSideToken","window","WINDOW_USER_SCRIPT_VARIABLE","getUserScript","JSON","stringify","authInitialProps","isProtectedRoute","auth","currentPath","url","location","pathname","isAnonymous","type","reirectUser","loginUser","email","password","data","post","logoutUser","push","getUserProfile","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEAD,KAAK,CAACE,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,GAAD,IAAS;AACzC,QAAM;AAAEC,IAAAA,aAAa,GAAG;AAAlB,MAAyB,EAA/B;;AACA,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD,GAFD,MAEO,IAAI,CAACA,aAAa,CAACC,KAAnB,EAA0B;AAC/B,WAAO,EAAP;AACD;;AACD,SAAO;AAAEC,IAAAA,IAAI,EAAEF,aAAa,CAACC;AAAtB,GAAP;AACD,CARM;AAUP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,aAAmC;AACjC,UAAMD,IAAI,GAAGE,MAAM,CAACC,2BAAD,CAAN,IAAuC,EAApD;AACA,WAAO;AAAEH,MAAAA;AAAF,KAAP;AACD;;AACD,SAAO;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAAP;AACD,CANM;AAQP,MAAMG,2BAA2B,GAAG,UAApC;AAEA,OAAO,MAAMC,aAAa,GAAIJ,IAAD,IAAU;AACrC,SAAQ,GAAEG,2BAA4B,MAAKE,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAqB,GAAhE;AACD,CAFM;AAIP,OAAO,MAAMO,gBAAgB,GAAIC,gBAAD,IAAsB,CAAC;AAAEX,EAAAA;AAAF,CAAD,KAAa;AACjE,QAAMY,IAAI,GAAGZ,GAAG,GAAGD,kBAAkB,CAACC,GAAD,CAArB,GAA6BI,mBAAmB,EAAhE;AACA,QAAMS,WAAW,GAAGb,GAAG,GAAGA,GAAG,CAACc,GAAP,GAAaT,MAAM,CAACU,QAAP,CAAgBC,QAApD;AACA,QAAMb,IAAI,GAAGS,IAAI,CAACT,IAAlB;AACA,QAAMc,WAAW,GAAG,CAACd,IAAD,IAASA,IAAI,CAACe,IAAL,KAAc,eAA3C;;AAEA,MAAIP,gBAAgB,IAAIM,WAAxB,EAAqC;AACnC,WAAOE,WAAP;AACD;;AAED,SAAO;AAAEP,IAAAA;AAAF,GAAP;AACD,CAXM;AAaP,OAAO,MAAMQ,SAAS,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAM5B,KAAK,CAAC6B,IAAN,CAAW,YAAX,EAAyB;AAAEH,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAzB,CAAvB;;AACA,aAAmC;AACjCjB,IAAAA,MAAM,CAACC,2BAAD,CAAN,GAAsCiB,IAAI,IAAI,EAA9C;AACD;AACF,CALM;AAOP,OAAO,MAAME,UAAU,GAAG,YAAY;AACpC,aAAmC;AACjCpB,IAAAA,MAAM,CAACC,2BAAD,CAAN,GAAsC,EAAtC;AACD;;AACD,QAAMX,KAAK,CAAC6B,IAAN,CAAW,aAAX,CAAN;AACA5B,EAAAA,MAAM,CAAC8B,IAAP,CAAY,QAAZ;AACD,CANM;AAQP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAM;AAAEJ,IAAAA;AAAF,MAAW,MAAM5B,KAAK,CAACiC,GAAN,CAAU,cAAV,CAAvB;AACA,SAAOL,IAAP;AACD,CAHM","sourcesContent":["import axios from \"axios\";\r\nimport Router from \"next/router\";\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nexport const getServerSideToken = (req) => {\r\n  const { signedCookies = {} } = {};\r\n  if (!signedCookies) {\r\n    return {};\r\n  } else if (!signedCookies.token) {\r\n    return {};\r\n  }\r\n  return { user: signedCookies.token };\r\n};\r\n\r\nexport const getClientsSideToken = () => {\r\n  if (typeof window !== \"undefined\") {\r\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\r\n    return { user };\r\n  }\r\n  return { user: {} };\r\n};\r\n\r\nconst WINDOW_USER_SCRIPT_VARIABLE = \"__USER__\";\r\n\r\nexport const getUserScript = (user) => {\r\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\r\n};\r\n\r\nexport const authInitialProps = (isProtectedRoute) => ({ req }) => {\r\n  const auth = req ? getServerSideToken(req) : getClientsSideToken();\r\n  const currentPath = req ? req.url : window.location.pathname;\r\n  const user = auth.user;\r\n  const isAnonymous = !user || user.type !== \"authenticated\";\r\n\r\n  if (isProtectedRoute && isAnonymous) {\r\n    return reirectUser;\r\n  }\r\n\r\n  return { auth };\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n  const { data } = await axios.post(\"/api/login\", { email, password });\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\r\n  }\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\r\n  }\r\n  await axios.post(\"/api/logout\");\r\n  Router.push(\"/login\");\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n  const { data } = await axios.get(\"/api/profile\");\r\n  return data;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}